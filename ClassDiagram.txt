@startuml
left to right direction
package Model <<Folder>> {
	interface Game {
		+createGame()
		+gameLoop()
		+saveToFile()
		+loadFromFile()
		+tourJoueur()
		+tourOrdinateur()
	}

	class NewSimpleGame {
	}
	Game <-- NewSimpleGame : implements

	class NewCustomGame {
	}
	Game <-- NewCustomGame : implements

	package strategie <<Folder>> {
		interface Strategie {
			int[] doComputePosition()
		}

		class Aleatoire {
			int[] doComputePosition()
		}
		Strategie <-- Aleatoire : implements

		class Croix {
			int[] doComputePosition()
		}
		Strategie <-- Croix : implements
	}

	class Bot {
		-Strategie strategie
		+Bot(Strategie strategie)
		+int[] executeStrategie()
	}
	strategie <-- Bot : uses

	package bateauFactory <<Folder>> {
		interface Bateau {
			Bateau creerBateau(int nbCases, Epoque epoque)
		}

		class BateauDeuxCases {
		}
		Bateau <-- BateauDeuxCases : implements
		class BateauTroisCases {
		}
		Bateau <-- BateauTroisCases : implements
		class BateauQuatreCases {
		}
		Bateau <-- BateauQuatreCases : implements
		class BateauCinqCases {
		}
		Bateau <-- BateauCinqCases : implements
	}

	class BateauFactory {
		+Bateau creerBateau()
	}
	bateauFactory <-- BateauFactory : creates

	class Map <<Serializable>> {
		-int nbCasesJoueur
		-int nbCasesBot
		-int[10][10] grilleJoueur
		-int[10][10] grilleBot
		-list bateauxJoueur
		-list bateauxBot

		+void verifierTouche (int x, int y)
		+void infligerDegat (Bateau bateau)
		+boolean verifierFinPartie ()
	}
	Map "-" - "1" Game
	Map "-" - "*" Bateau

	class FileManager <<Singleton>> {
		-{static}FileManager instance
		-FileManager()
		+{static}FileManager getInstance()
		~void saveToFile(String file, PlateauJeu map)
		~PlateauJeu loadFromFile(String file)
	}
	FileManager <-- FileManager : returns

	FileManager <-- Game
	BateauFactory <-- Game
	Bot <-- Game
}
@enduml